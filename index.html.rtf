{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 <!DOCTYPE html>\
<html lang="de">\
  <head>\
    <meta charset="UTF-8" />\
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\
    <meta name="theme-color" content="#0000FF" />\
    <title>Busfahrer Navi</title>\
    <link rel="manifest" href="manifest.json" />\
    <style>\
      html, body, #map \{\
        margin: 0;\
        padding: 0;\
        height: 100%;\
        width: 100%;\
      \}\
      #admin \{\
        position: absolute;\
        top: 10px;\
        left: 10px;\
        z-index: 5;\
        background: rgba(255,255,255,0.9);\
        padding: 8px;\
        border-radius: 8px;\
        font-family: Arial, sans-serif;\
        width: 260px;\
      \}\
      #admin h3 \{margin: 0 0 6px 0; font-size: 16px;\}\
      #admin input, #admin select \{\
        width: 100%;\
        margin-bottom: 4px;\
        padding: 4px;\
        box-sizing: border-box;\
      \}\
      #admin button \{\
        width: 100%;\
        padding: 6px;\
        border: none;\
        border-radius: 6px;\
        background: #0000FF;\
        color: #fff;\
        font-size: 14px;\
      \}\
    </style>\
  </head>\
  <body>\
    <div id="map"></div>\
\
    <div id="admin">\
      <h3>Umleitung hinzuf\'fcgen</h3>\
      <select id="lineInput">\
        <option value="M27">M27</option>\
        <option value="123">123</option>\
        <option value="245">245</option>\
        <option value="TXL">TXL</option>\
        <option value="N1">N1</option>\
        <option value="SEV U6">SEV U6</option>\
        <option value="SEV U2">SEV U2</option>\
        <option value="X10">X10</option>\
        <option value="M41">M41</option>\
        <option value="N7">N7</option>\
        <option value="SEV S1">SEV S1</option>\
      </select>\
      <input id="reasonInput" placeholder="Grund" />\
      <input id="latInput" placeholder="Latitude" />\
      <input id="lngInput" placeholder="Longitude" />\
      <button id="addBtn">Hinzuf\'fcgen</button>\
    </div>\
\
    <script>\
      const busLines = \{\
        "M27": \{\
          name: "M27",\
          stops: [\
            \{ name: "S+U Jungfernheide", lat: 52.530011, lng: 13.299823 \},\
            \{ name: "U Turmstr.", lat: 52.526007, lng: 13.339764 \},\
            \{ name: "Hauptbahnhof", lat: 52.525084, lng: 13.369402 \},\
            \{ name: "Friedrichstr.", lat: 52.520805, lng: 13.387176 \},\
            \{ name: "U Rosenthaler Platz", lat: 52.531675, lng: 13.401384 \},\
            \{ name: "Pappelallee", lat: 52.541125, lng: 13.416288 \}\
          ]\
        \},\
        "123": \{\
          name: "123",\
          stops: [\
            \{ name: "U Kurf\'fcrstenstr.", lat: 52.499294, lng: 13.357328 \},\
            \{ name: "S+U Yorckstr.", lat: 52.493318, lng: 13.365362 \},\
            \{ name: "U M\'f6ckernbr\'fccke", lat: 52.496203, lng: 13.382165 \}\
          ]\
        \},\
        "SEV U6": \{\
          name: "SEV U6",\
          stops: [\
            \{ name: "Alt-Tegel", lat: 52.588234, lng: 13.293746 \},\
            \{ name: "Kurt-Schumacher-Platz", lat: 52.561574, lng: 13.326599 \},\
            \{ name: "Wedding", lat: 52.548, lng: 13.369 \}\
          ]\
        \}\
      \};\
\
      const disruptions = [\
        \{\
          line: "M27",\
          reason: "Baustelle Turmstra\'dfe",\
          location: \{ lat: 52.526007, lng: 13.339764 \},\
          active: true,\
          color: "red"\
        \}\
      ];\
\
      let map;\
      let currentLine = "M27";\
\
      async function loadLiveDisruptions(lineName) \{\
        try \{\
          const response = await fetch('disruptions.json');\
          const liveDisruptions = await response.json();\
          return liveDisruptions.filter(d => d.line === lineName && d.active);\
        \} catch (e) \{\
          console.warn("Live-Umleitungen konnten nicht geladen werden:", e);\
          return [];\
        \}\
      \}\
\
      function addDisruptionMarker(disruption) \{\
        new google.maps.Marker(\{\
          position: disruption.location,\
          map,\
          icon: `http://maps.google.com/mapfiles/ms/icons/$\{disruption.color || 'orange'\}-dot.png`,\
          title: `$\{disruption.line\}: $\{disruption.reason\}`\
        \});\
      \}\
\
      async function drawLine(lineName) \{\
        const line = busLines[lineName];\
        if (!line) return;\
\
        map.setCenter(\{ lat: line.stops[0].lat, lng: line.stops[0].lng \});\
\
        const busPath = new google.maps.Polyline(\{\
          path: line.stops.map(stop => (\{ lat: stop.lat, lng: stop.lng \})),\
          geodesic: true,\
          strokeColor: "#0000FF",\
          strokeOpacity: 1.0,\
          strokeWeight: 4\
        \});\
        busPath.setMap(map);\
\
        line.stops.forEach(stop => \{\
          new google.maps.Marker(\{ position: \{ lat: stop.lat, lng: stop.lng \}, map, title: stop.name \});\
        \});\
\
        disruptions.filter(d => d.line === lineName).forEach(addDisruptionMarker);\
        const liveDisruptions = await loadLiveDisruptions(lineName);\
        liveDisruptions.forEach(d => addDisruptionMarker(\{ ...d, color: 'orange' \}));\
      \}\
\
      async function initMap() \{\
        currentLine = document.getElementById('lineInput').value;\
        map = new google.maps.Map(document.getElementById("map"), \{\
          zoom: 13,\
          center: \{ lat: 52.52, lng: 13.38 \}\
        \});\
        await drawLine(currentLine);\
      \}\
\
      document.addEventListener('DOMContentLoaded', () => \{\
        document.getElementById('addBtn').addEventListener('click', () => \{\
          const line = document.getElementById('lineInput').value.trim();\
          const reason = document.getElementById('reasonInput').value.trim();\
          const lat = parseFloat(document.getElementById('latInput').value);\
          const lng = parseFloat(document.getElementById('lngInput').value);\
          if (!line || !reason || isNaN(lat) || isNaN(lng)) \{\
            alert('Bitte alle Felder korrekt ausf\'fcllen');\
            return;\
          \}\
          const newDisruption = \{ line, reason, location: \{ lat, lng \}, active: true, color: 'purple' \};\
          addDisruptionMarker(newDisruption);\
          alert('Umleitung hinzugef\'fcgt!');\
        \});\
\
        document.getElementById('lineInput').addEventListener('change', async (e) => \{\
          currentLine = e.target.value;\
          initMap();\
        \});\
      \});\
\
      if ('serviceWorker' in navigator) \{\
        navigator.serviceWorker.register('sw.js').then(() => console.log('Service Worker registriert'));\
      \}\
    </script>\
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"></script>\
  </body>\
</html>}